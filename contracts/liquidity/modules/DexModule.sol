// SPDX-License-Identifier: GPL-2.0-or-later
pragma solidity 0.8.10;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";

import "../../interfaces/IDexModule.sol";
import "../Types.sol";
import "./Module.sol";

/**
 * @notice This is the base of all modules. Modules shares part of the storage with `LiquidityManager`
 * @dev do NOT edit this file unless you know what you are doing !!
 */
abstract contract DexModule is Module, IDexModule {
    using SafeERC20 for IERC20;

    event TransferDexFee(uint8 dexId, address indexed recipient, address indexed token, uint256 amount);

    function tokens() public view virtual override returns (bool needCheck, address[] memory tokens_) {
        needCheck = true; // cannot pass check by default
    }

    function _transferFee(address token, uint256 amount) internal {
        if (amount == 0 || _vault == address(0)) {
            return;
        }
        IERC20(token).safeTransfer(_vault, amount);
    }
}
